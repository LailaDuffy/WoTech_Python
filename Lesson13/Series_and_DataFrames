import pandas as pd

# LIST
data_list = [1, 2, 3, 4, 5]
print(data_list)

# PANDAS SERIES - used for collecting data like anonymous ratings
series_from_list = pd.Series(data_list)
print(series_from_list)

# PANDAS DATAFRAME - collection of series, creates a table
dataframe_from_list = pd.DataFrame(data_list)
print(dataframe_from_list)

# DICTIONARY
data_dict = {'A': 10, 'B': 20, 'C': 30, 'D': 40, 'E': 50}

dataframe_from_dict = pd.Series(data_dict)
print(dataframe_from_dict)

# CSV DATA
csv_data = "1,2,3,4,5" # String
csv_data.split(',') # Split String into a list

series_from_list = pd.Series(csv_data)
print(csv_data)

series_from_list_split = pd.Series(csv_data.split(','))
print(series_from_list_split)

# DATA FRAMES
data_list = [
    ['John', 30, 68.5, True, 95.5],
    ['Alice', 25, 63.2, False, 88.0],
    ['Bob', 35, 71.0, True, 76.5],
    ['Eve', 28, 65.8, False, 92.0],
    ['Charlie', 40, 72.3, False, 87.5]
]

pd.DataFrame(data_list) 
column_names = ['Name', 'Age', 'Weight', 'Is Student', 'Score']
pd.DataFrame(data_list, columns=column_names)

# WORKING WITH A CSV FILE
df = pd.read_csv('/content/transaction_dataset.csv') # read in the file

df.head() # gives first 5 rows of dataframe

df.tail(n=10) # gives last 10 rows in dataframe

df.shape # defines how many rows and columns are in the dataframe

df.sample(5) # gives random samples (5 in this case) of the data

df.info() # important for big datafrmes, it gives info about columns (name), data types (Dtype), how many values are there 

df.describe() # summary statistics of integers/floats

df.describe(include='object') # summary statstics of all objects from the data

df['Gender'] # to select a specific column, accessing the column by it's name, can access several columns together
# How many unique values are in the column?
df['Gender'].unique() 

df.Gender # to select a specific column, accessing as an attribute, only one column can be accessed at a time, AND ONLY COLUMNS WITH ONE WORD

df.iloc[:, 3] # accessing column with index (iloc = index location [row, column]) 

df['Gender'].value_counts(dropna=False) # to count specific values, usually leaves out NaN, but can be included when defining value_counts(dropna=False)

df.isna() # will return the table in binary values of which values are N/A False = 0, True = 1

df.isna().sum() # how many N/A values there are in each column

df.notna().sum() # how many actual values are in each column

df.notna().all() # bool check if there are any values that are empty (returns False)

df.dropna() # dropping the rows that have an empty value somewhere, it does not override the original dataframe

df_new_dataframe = df.dropna() # saving the cleaned up data into a new file, leaves the original file 
# OR
df.dropna(inplace=True) # drops the rows that have an empty value somewhere AND REPLACES THE ORIGINAL DATAFRAME

df.to_csv('cleaned_data.csv') # saving the cleaned up dataframe as a csv file
